AWSTemplateFormatVersion: 2010-09-09
Description: (SOCA) - Deploy master host.
Parameters:
  SubnetId:
    Type: AWS::EC2::Subnet::Id

  SecurityGroupId:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: For security reason, limit SSH to known networks

  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName

  SchedulerInstanceType:
    Type: String

  SchedulerIAMInstanceProfile:
    Type: String

  S3InstallFolder:
    Type: String

  S3Bucket:
    Type: String

  ClusterId:
    Type: String

  EFSAppsDns:
    Type: String

  EFSDataDns:
    Type: String

  ImageId:
    Type: String

  BaseOS:
    Type: String

  Version:
    Type: String

  UserName:
    Type: String

  UserPassword:
    Type: String

Conditions:
  UseAmazonLinux: !Equals [ !Ref BaseOS, 'amazonlinux2']

Resources:
  SchedulerEC2Host:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      DisableApiTermination: false
      InstanceType: !Ref SchedulerInstanceType
      IamInstanceProfile:
        Ref: SchedulerIAMInstanceProfile
      BlockDeviceMappings:
        - DeviceName: !If [UseAmazonLinux, "/dev/xvda", "/dev/sda1"]
          Ebs:
            VolumeSize: 150
            VolumeType: gp2
            Encrypted: true

      KeyName: !Ref SSHKeyPair
      SecurityGroupIds: !Ref SecurityGroupId
      SubnetId: !Ref SubnetId

      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-Scheduler
        - Key: soca:KeepForever
          Value: true
        - Key: soca:ClusterId
          Value: !Sub ${ClusterId}
        - Key: soca:NodeType
          Value: scheduler
        - Key: soca:BackupPlan
          Value: !Sub ${ClusterId}

      UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash -xe

            export PATH=$PATH:/usr/local/bin

            # Install awscli, ansible and boto3 on system python
            EASY_INSTALL=$(which easy_install-2.7)
            $EASY_INSTALL pip
            PIP=$(which pip2.7)
            $PIP install awscli ansible boto3

            echo export "AWS_DEFAULT_REGION=${AWS::Region}" >> /etc/environment
            echo export "SOCA_BASE_OS=${BaseOS}" >> /etc/environment
            echo export "SOCA_CLUSTER_ID=${ClusterId}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET=${S3Bucket}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET_FOLDER=${S3InstallFolder}" >> /etc/environment
            echo export "SOCA_VERSION=${Version}" >> /etc/environment
            echo export "SOCA_INSTALL_AMI=${ImageId}" >> /etc/environment
            echo export "SOCA_EFS_APPS=${EFSAppsDns}" >> /etc/environment
            echo export "SOCA_EFS_DATA=${EFSDataDns}" >> /etc/environment
            echo export "SOCA_HOST_TYPE=master" >> /etc/environment

            AWS=$(which aws)
            # Copy Ansible roles (master) to local root for first setup.
            $AWS s3 sync s3://${S3Bucket}/${S3InstallFolder}/scripts/ansible/roles/common/ /root/scripts/ansible/roles/common/
            $AWS s3 sync s3://${S3Bucket}/${S3InstallFolder}/scripts/ansible/roles/master/ /root/scripts/ansible/roles/master/

            # Start Ansible setup for the master host
            ANSIBLE_PLAYBOOK=$(which ansible-playbook)
            $ANSIBLE_PLAYBOOK /root/scripts/ansible/roles/master/tasks/main.yml --extra-var "SOCA_DEFAULT_USER_USERNAME='${UserName}' SOCA_DEFAULT_USER_PASSWORD='${UserPassword}'" >> /root/AnsibleMasterHostConfiguration.log 2>&1

  EIPScheduler:
    DependsOn: SchedulerEC2Host
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref SchedulerEC2Host
      Tags:
        - Key: Name
          Value: !Ref ClusterId
        - Key: soca:ClusterId
          Value: !Ref ClusterId

Outputs:
  SchedulerInstanceId:
    Value: !Ref SchedulerEC2Host
  SchedulerPrivateIP:
    Value: !GetAtt SchedulerEC2Host.PrivateIp
  SchedulerPrivateDnsName:
    Value: !GetAtt SchedulerEC2Host.PrivateDnsName
  SchedulerPublicIP:
    Value: !Ref EIPScheduler