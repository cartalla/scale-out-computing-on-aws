AWSTemplateFormatVersion: 2010-09-09
Description: (SOCA) - Manage network & VPC creation.
Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR (/16)  Block (eg 10.0.0.0/16)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/16'
  ClusterId:
    Type: String
  SocaDomain:
    Type: String

Resources:
  Vpc:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: "Not enforcing VPC Flow Log. Customers are able to enable it post-launch if needed"

    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-VPC
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 6, 13]]
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-Public1
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 6, 13 ]]
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-Public2
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt Vpc.CidrBlock, 6, 13 ]]
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-Public3
        - Key: soca:ClusterId
          Value: !Ref ClusterId


  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt Vpc.CidrBlock, 6 , 13 ]]
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-Private1
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt Vpc.CidrBlock, 6, 13 ]]
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-Private2
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt Vpc.CidrBlock, 6 , 13 ]]
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-Private3
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  EIPNat:
    DependsOn: PublicSubnet1
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIPScheduler:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Ref ClusterId
        - Key: soca:ClusterId
          Value: !Ref ClusterId


  NatGateway:
    DependsOn: EIPNat
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNat.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-NATGateway
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-InternetGateway
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  VPCIGWAttachment:
    DependsOn: InternetGateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  PublicRouteTable:
    DependsOn: VPCIGWAttachment
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-PublicRoute

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-PrivateRoute

  PublicRoute:
    DependsOn: PublicRouteTable
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PrivateRoute:
    DependsOn: PrivateRouteTable
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable

  PublicRouteSubnetAssociation1:
    DependsOn: PublicRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicRouteSubnetAssociation2:
    DependsOn: PublicRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicRouteSubnetAssociation3:
    DependsOn: PublicRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteSubnetAssociation1:
    DependsOn: PrivateRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteSubnetAssociation2:
    DependsOn: PrivateRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteSubnetAssociation3:
    DependsOn: PrivateRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  PrivateDNS:
    # Can't create query logging for private hosted zone.
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref SocaDomain
      VPCs: 
        - VPCId: !Ref Vpc
          VPCRegion: !Ref 'AWS::Region'
      HostedZoneTags: 
        - Key: 'soca:ClusterId'
          Value: !Ref ClusterId

  VpcFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "${ClusterId}-vpc-flow-logs"
      RetentionInDays: 3653

  VpcFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "vpc-flow-logs.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: FlowLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - '*'

  VpcFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties: 
      ResourceType: VPC
      ResourceId: !Ref Vpc
      TrafficType: ALL
      MaxAggregationInterval: 60
      LogDestinationType: cloud-watch-logs
      LogDestination: !GetAtt VpcFlowLogsLogGroup.Arn
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogsRole.Arn
      Tags: 
        - Key: 'soca:ClusterId'
          Value: !Ref ClusterId

Outputs:
  VpcId:
    Value: !Ref Vpc
  PublicSubnet1:
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
  PublicSubnet3:
    Value: !Ref PublicSubnet3
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
  PrivateSubnet3:
    Value: !Ref PrivateSubnet3
  PrivateRouteTable:
    Value: !Ref PrivateRouteTable
  EIPNat:
    Value: !Ref EIPNat
  SchedulerPublicIP:
    Value: !Ref EIPScheduler
  SchedulerPublicIPAllocation:
    Value: !GetAtt EIPScheduler.AllocationId
  HostedZoneId:
    Value: !Ref PrivateDNS
