AWSTemplateFormatVersion: 2010-09-09
Description: (SOCA) - Manage security stack.
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  
  SocaDomain:
    Type: String

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id

  AL2ImageId:
    Type: AWS::EC2::Image::Id

  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName

  ProxyInstanceType:
    Type: String

  ProxySubnetId:
    Type: AWS::EC2::Subnet::Id

  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id

  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id

  PrivateSubnet3:
    Type: AWS::EC2::Subnet::Id

  PrivateRouteTable:
    Type: String

  ClientIp:
    Type: String

  PrefixListId:
    Type: String

  SchedulerPublicIP:
    Type: String

  EIPNat:
    Type: String

  ClusterId:
    Type: String

  S3InstallBucket:
    Type: String

  S3InstallFolder:
    Type: String

Conditions:
  HasClientIp:
    !Not [ !Equals [ !Ref ClientIp, '' ] ]

  HasPrefixListId:
    !Not [ !Equals [ !Ref PrefixListId, '' ] ]

Resources:

  #============================================================================
  # Custom resource to get regional S3 prefix list Id
  # This is needed to allow egress to the s3 gateway endpoint
  #============================================================================

  GetPrefixListLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PreRequisite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":logs:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":log-group:/aws/lambda/", !Ref ClusterId, "*"] ]

              - Effect: Allow
                Action:
                  - ec2:DescribePrefixLists
                Resource:
                  - '*'

  GetPrefixListLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Get Prefix list id
      FunctionName: !Sub "${ClusterId}-GetPrefixList"
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt GetPrefixListLambdaRole.Arn
      Runtime: python3.7
      Timeout: 180
      Tags:
        - Key: soca:ClusterId
          Value: !Ref ClusterId
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import boto3
          '''
          Get prefix list id
          '''

          def lambda_handler(event, context):
            prefixListName = event['ResourceProperties']['PrefixListName']

            try:
              ec2_client = boto3.client('ec2')
              prefixListId = ec2_client.describe_prefix_lists(Filters=[{'Name': 'prefix-list-name', 'Values': [prefixListName]}])['PrefixLists'][0]['PrefixListId']
            except:
              error_message = 'Exception getting prefix list id for {}'.format(prefixListName)
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': error_message}, error_message)

            cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Id': prefixListId}, prefixListId)

  S3PrefixList:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GetPrefixListLambda.Arn
      PrefixListName: !Sub "com.amazonaws.${AWS::Region}.s3"

  #============================================================================
  # VPC Endpoints
  #============================================================================

  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      VpcId: !Ref VpcId
      RouteTableIds:
        - !Ref PrivateRouteTable
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal: "*"
          Action:
            - "s3:GetObject"
            - "s3:List*"
          Resource:
            - !Sub "arn:aws:s3:::${S3InstallBucket}/${S3InstallFolder}/*"
          Condition:
            StringEquals:
              "aws:PrincipalAccount": !Ref "AWS::AccountId"
#         - Effect: Allow
#           Principal: "*"
#           Action:
#             - "s3:DeleteObject"
#             - "s3:Get*"
#             - "s3:PutObject"
#             - "s3:List*"
#           Resource:
#             - {"Fn::Sub": "arn:aws:s3:::{{S3BucketPrefix}}-${Airport}-${Stage}"}
#             - {"Fn::Sub": "arn:aws:s3:::{{S3BucketPrefix}}-${Airport}-${Stage}/*"}

  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "VPC Endpoints"
      Tags:
      - Key: Name
        Value: !Sub "${ClusterId}-VpcEndpointsSG"
      VpcId: !Ref VpcId

  VpcEndpointInboundRuleScheduler:
    Condition: HasClientIp
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !GetAtt SchedulerSecurityGroup.GroupId
      GroupId: !GetAtt VpcEndpointSecurityGroup.GroupId
      Description: "Scheduler"

  VpcEndpointInboundRuleComputeNode:
    Condition: HasClientIp
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      GroupId: !GetAtt VpcEndpointSecurityGroup.GroupId
      Description: "ComputeNode"

  VpcEndpointInboundRuleProxy:
    Condition: HasClientIp
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !GetAtt ProxySecurityGroup.GroupId
      GroupId: !GetAtt VpcEndpointSecurityGroup.GroupId
      Description: "Proxy"

  # run_instances fails with --iam-instance-profile if this is there
  # EC2VpcEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2"
  #     VpcEndpointType: Interface
  #     VpcId: !Ref VpcId
  #     PrivateDnsEnabled: true
  #     SecurityGroupIds:
  #       - !Ref VpcEndpointSecurityGroup
  #     SubnetIds:
  #       - !Ref PrivateSubnet1
  #       - !Ref PrivateSubnet2
  #       - !Ref PrivateSubnet3
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #       - Effect: Allow
  #         Principal: "*"
  #         Action:
  #           - "ec2:*"
  #         Resource:
  #           - "*"
  #         Condition:
  #           StringEquals:
  #             "aws:PrincipalAccount": !Ref "AWS::AccountId"

  SSMVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      VpcId: !Ref VpcId
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  Ec2MessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      VpcEndpointType: Interface
      VpcId: !Ref VpcId
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  SSMMessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      VpcEndpointType: Interface
      VpcId: !Ref VpcId
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  SecretsManagerVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      VpcEndpointType: Interface
      VpcId: !Ref VpcId
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  #============================================================================
  # Proxy server
  #============================================================================

  ProxyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AL2ImageId
      DisableApiTermination: false
      InstanceType: !Ref ProxyInstanceType
      IamInstanceProfile:
        Ref: ProxyIAMInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 150
            VolumeType: gp2
            Encrypted: true

      KeyName: !Ref SSHKeyPair

      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref ProxySecurityGroup
          SubnetId: !Ref ProxySubnetId

      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-Proxy
        - Key: soca:KeepForever
          Value: true
        - Key: soca:ClusterId
          Value: !Sub ${ClusterId}
        - Key: soca:NodeType
          Value: proxy
        - Key: soca:BackupPlan
          Value: !Sub ${ClusterId}

      UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash -xe

            AWS=$(which aws)
            echo export "SOCA_CONFIGURATION=${ClusterId}" >> /etc/environment
            echo export "AWS_DEFAULT_REGION=${AWS::Region}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET=${S3InstallBucket}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET_FOLDER=${S3InstallFolder}" >> /etc/environmentenvironment
            echo export "SOCA_DOMAIN=${SocaDomain}" >> /etc/environment
            echo export "SOCA_HOSTED_ZONE_ID=${HostedZoneId}" >> /etc/environment
            source /etc/environment

            # Tag EBS disks manually as CFN ASG does not support it
            AWS_AVAIL_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)
            AWS_REGION="`echo \"$AWS_AVAIL_ZONE\" | sed "s/[a-z]$//"`"
            AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            EBS_IDS=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values="$AWS_INSTANCE_ID" --region $AWS_REGION --query "Volumes[*].[VolumeId]" --out text | tr "\n" " ")
            $AWS ec2 create-tags --resources $EBS_IDS --region $AWS_REGION --tags Key=Name,Value="${ClusterId} Root Disk" "Key=soca:ClusterId,Value=${ClusterId}"

            # Tag Network Adapter for the Proxy
            ENI_IDS=$(aws ec2 describe-network-interfaces --filters Name=attachment.instance-id,Values="$AWS_INSTANCE_ID" --region $AWS_REGION --query "NetworkInterfaces[*].[NetworkInterfaceId]" --out text | tr "\n" " ")
            $AWS ec2 create-tags --resources $ENI_IDS --region $AWS_REGION --tags Key=Name,Value="${ClusterId} Proxy Network Adapter" "Key=soca:ClusterId,Value=${ClusterId}"

            $AWS s3 cp s3://${S3InstallBucket}/${S3InstallFolder}/scripts/Proxy.sh /root/
            chmod 0700 /root/Proxy.sh
            /root/Proxy.sh >> /root/Proxy.sh.log 2>&1

  #============================================================================
  # Proxy Security Group
  #============================================================================

  ProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: SG For Proxy Host
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-ProxySG
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  ProxyInboundRuleComputeNode:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3128
      ToPort: 3128
      SourceSecurityGroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      GroupId: !GetAtt ProxySecurityGroup.GroupId
      Description: "ComputeNode"

  ProxyInboundRuleScheduler:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3128
      ToPort: 3128
      SourceSecurityGroupId: !GetAtt SchedulerSecurityGroup.GroupId
      GroupId: !GetAtt ProxySecurityGroup.GroupId
      Description: "Scheduler"

  ProxyInboundRuleAllowClientIP:
    Condition: HasClientIp
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt SchedulerSecurityGroup.GroupId
      GroupId: !GetAtt ProxySecurityGroup.GroupId
      Description: "Scheduler"

  ProxyInboundRuleAllowPrefixList:
    Condition: HasPrefixListId
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourcePrefixListId: !Ref PrefixListId
      GroupId: !GetAtt ProxySecurityGroup.GroupId
      Description: "Scheduler"

  ProxyOutboundHTTP:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt ProxySecurityGroup.GroupId
      Description: Internet

  ProxyOutboundHTTPS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt ProxySecurityGroup.GroupId
      Description: Internet

  ProxyOutboundS3Http:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationPrefixListId: !GetAtt S3PrefixList.Id
      GroupId: !GetAtt ProxySecurityGroup.GroupId
      Description: S3

  ProxyOutboundS3Https:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationPrefixListId: !GetAtt S3PrefixList.Id
      GroupId: !GetAtt ProxySecurityGroup.GroupId
      Description: S3

  ProxyOutboundVpcEndpointHTTP:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !GetAtt VpcEndpointSecurityGroup.GroupId
      GroupId: !GetAtt ProxySecurityGroup.GroupId
      Description: VpcEndpoint

  ProxyOutboundVpcEndpointHTTPS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !GetAtt VpcEndpointSecurityGroup.GroupId
      GroupId: !GetAtt ProxySecurityGroup.GroupId
      Description: VpcEndpoint

  #============================================================================
  # Scheduler Security Group
  #============================================================================

  SchedulerSecurityGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: "All access for Egress traffic"
          - id: W27
            reason: "All traffic permitted between Scheduler and Compute Nodes"
          - id: W29
            reason: "All ports open for Egress traffic - esp required in case of FlexLM licensing"
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: SG For Scheduler Host
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-SchedulerSG
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  SchedulerInboundRuleLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
      SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: "LoadBalancer - Allow ELB healtcheck to communicate with web ui on master host"

  SchedulerInboundRuleComputeNodeLDAP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 389
      ToPort: 389
      SourceSecurityGroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: "ComputeNode - LDAP"

  SchedulerInboundRuleComputeNodeEphemeral:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 1024
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: "Allow all traffic between scheduler and compute nodes"

  SchedulerInboundRuleAllowClientIPSSH:
    Condition: HasClientIp
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref ClientIp
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: "Allow SSH traffic from client IP to master host"

  SchedulerInboundRuleAllowPrefixListSSH:
    Condition: HasPrefixListId
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourcePrefixListId: !Ref PrefixListId
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: "Allow SSH traffic from client IP to master host"

  SchedulerInboundRuleAllowClientIPHTTPS:
    Condition: HasClientIp
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref ClientIp
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: "Allow HTTPS traffic from client IP to ELB"

  SchedulerInboundRuleAllowPrefixListHTTP:
    Condition: HasPrefixListId
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourcePrefixListId: !Ref PrefixListId
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: "Allow HTTP traffic from client IP to ELB"

  SchedulerInboundRuleAllowPrefixListHTTPS:
    Condition: HasPrefixListId
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourcePrefixListId: !Ref PrefixListId
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: "Allow HTTPS traffic from client IP to ELB"

  SchedulerOutboundComputeNodeSSH:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: ComputeNode

  SchedulerOutboundComputeNodeEphemeral:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 1024
      ToPort: 65535
      DestinationSecurityGroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: ComputeNode

  SchedulerOutboundProxy:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 3128
      ToPort: 3128
      DestinationSecurityGroupId: !GetAtt ProxySecurityGroup.GroupId
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: Proxy

  SchedulerOutboundVpcEndpointHttp:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !GetAtt VpcEndpointSecurityGroup.GroupId
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: VpcEndpoint

  SchedulerOutboundVpcEndpointHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !GetAtt VpcEndpointSecurityGroup.GroupId
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: VpcEndpoint

  SchedulerOutboundS3Http:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationPrefixListId: !GetAtt S3PrefixList.Id
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: S3

  SchedulerOutboundS3Https:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationPrefixListId: !GetAtt S3PrefixList.Id
      GroupId: !GetAtt SchedulerSecurityGroup.GroupId
      Description: S3

  #============================================================================
  # ComputeNode Security Group
  #============================================================================

  ComputeNodeSecurityGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: "All CIDR access for Egress traffic"
          - id: W27
            reason: "All traffic permitted between Scheduler and Compute Nodes"
          - id: W29
            reason: "All ports open for Egress traffic - esp required in case of FlexLM licensing"
          - id: W40
            reason: "All traffic egress traffic required for EFA"
          - id: W42
            reason: "All traffic ingress traffic required for EFA"

    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: SG For all Compute Nodes
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-ComputeNodeSG
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  ComputeNodeInboundRuleLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
      SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      Description: "LoadBalancer - Allow ELB healtcheck"

  ComputeNodeInboundRuleScheduler:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 1024
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt SchedulerSecurityGroup.GroupId
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      Description: "Allow traffic between Master agent and compute nodes"

  ComputeNodeInboundRuleSchedulerSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt SchedulerSecurityGroup.GroupId
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      Description: "Scheduler"

  ComputeNodeInboundRuleItSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 1024
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      Description: "Allow ALL traffic for ComputeNode and EFA"

  ComputeNodeOutboundItself:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 1024
      ToPort: 65535
      DestinationSecurityGroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      Description: "Egress ALL traffic for ComputeNode and EFA"

  ComputeNodeOutboundSchedulerLDAP:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 389
      ToPort: 389
      DestinationSecurityGroupId: !GetAtt SchedulerSecurityGroup.GroupId
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      Description: "Scheduler LDAP"

  ComputeNodeOutboundSchedulerEphemeral:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 1024
      ToPort: 65535
      DestinationSecurityGroupId: !GetAtt SchedulerSecurityGroup.GroupId
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      Description: "Scheduler Ephemeral"

  ComputeNodeOutboundProxy:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 3128
      ToPort: 3128
      DestinationSecurityGroupId: !GetAtt ProxySecurityGroup.GroupId
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      Description: "Proxy"

  ComputeNodeOOutboundS3Https:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationPrefixListId: !GetAtt S3PrefixList.Id
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      Description: S3

  ComputeNodeOOutboundS3Https:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationPrefixListId: !GetAtt S3PrefixList.Id
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      Description: S3

  ComputeNoteOutboundVpcEndpointHttp:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !GetAtt VpcEndpointSecurityGroup.GroupId
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      Description: VpcEndpoint

  ComputeNoteOutboundVpcEndpointHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !GetAtt VpcEndpointSecurityGroup.GroupId
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      Description: VpcEndpoint

  #============================================================================
  # LoadBalancer Security Group
  #============================================================================

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: SG For LoadBalancer
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-LoadBalancerSG
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  LoadBalancerInboundRuleClientIPSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref ClientIp
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      Description: "ClientIP"

  LoadBalancerInboundRuleAllowClientIPHTTP:
    Condition: HasClientIp
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !Ref ClientIp
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      Description: "ClientIP"

  LoadBalancerInboundRuleClientIPHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref ClientIp
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      Description: "ClientIP"

  LoadBalancerInboundRulePrefixListSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourcePrefixListId: !Ref PrefixListId
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      Description: "Client PrefixList"

  LoadBalancerInboundRuleAllowPrefixListHTTP:
    Condition: HasPrefixListId
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourcePrefixListId: !Ref PrefixListId
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      Description: "Client PrefixList"

  LoadBalancerInboundRulePrefixListHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourcePrefixListId: !Ref PrefixListId
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      Description: "Client PrefixList"

  LoadBalancerInboundRuleAllowSchedulerIPHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join [ "", [ !Ref SchedulerPublicIP, "/32" ] ]
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      Description: "Scheduler Public IP - Allow HTTPS traffic to validate DCV sessions"

  LoadBalancerInboundRuleAllowNATIPHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join [ "", [ !Ref EIPNat, "/32" ] ]
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      Description: "NAT IP - Allow HTTPS traffic from Compute Nodes to ELB"

  LoadBalancerInboundRuleAllowProxyHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join [ "", [ !GetAtt ProxyEC2Instance.PublicIp, "/32" ] ]
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      Description: "Proxy - Allow HTTPS traffic from Compute Nodes to ELB"

  LoadBalancerOutboundRuleAllowScheduler8443:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
      DestinationSecurityGroupId: !GetAtt SchedulerSecurityGroup.GroupId
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      Description: Scheduler - ELB Health checks

  LoadBalancerOutboundRuleAllowComputeNode8443:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
      DestinationSecurityGroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      Description: Scheduler - ELB Health checks

  # Begin IAM

  ComputeNodeIAMRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "* is reduced to minimal pattern"


    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "ssm.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # Support for SSM
      Policies:
        - PolicyName: ComputeNodePermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::", !Ref S3InstallBucket , "/*" ] ]
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::", !Ref S3InstallBucket] ]
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::dcv-license.", !Ref "AWS::Region", "/*"] ]
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::ec2-linux-nvidia-drivers", "/*"] ]
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::ec2-linux-nvidia-drivers"] ]

              - Effect: Allow
                Action:
                  -  ses:SendEmail
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":ses:*:", !Ref  "AWS::AccountId", ":identity*"] ]

              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource:
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:volume/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:network-interface/*"

              - Effect: Allow
                Action:
                  - ec2:DescribeVolumes
                  - ec2:DescribeNetworkInterfaces
                  - fsx:CreateDataRepositoryTask
                  - fsx:DescribeFileSystems # For FSX
                  - tag:GetResources # For FSX detection
                  - tag:GetTagValues # For FSX detection
                  - tag:GetTagKeys # For FSX detection
                Resource: "*"

  ComputeNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ComputeNodeIAMRole
      #InstanceProfileName: !Sub ${ClusterId}-ComputeNodeInstanceProfile

  SpotFleetIAMRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "* is reduced to minimal pattern"
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "spotfleet.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SpotFleetPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeImages
                  - ec2:DescribeSubnets
                  - ec2:DescribeInstanceStatus
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:RequestSpotInstances
                  - ec2:TerminateInstances
                  - ec2:CreateTags
                Resource:
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*"
                Condition:
                  "ForAllValues:ArnEqualsIfExists":
                      "ec2:Vpc": !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VpcId}"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt ComputeNodeIAMRole.Arn
                Condition:
                  "StringEquals":
                      "iam:PassedToService": ["ec2.amazonaws.com", "ec2.amazonaws.com.cn"]

  ProxyIAMRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "API calls are read commands which have to be mapped to wildcard resources"
          - id: W76
            reason: "Stelligent Policy Complexity Metric (SPCM) already reduced to minimum"

    Type: AWS::IAM::Role
    DependsOn: ComputeNodeIAMRole
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "ssm.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # Support for SSM

      Policies:
        - PolicyName: ProxyPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource:
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ClusterId}/ProxyPrivateIp"

              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::", !Ref S3InstallBucket , "/*" ] ]
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::", !Ref S3InstallBucket] ]

              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::dcv-license.", !Ref "AWS::Region", "/*"] ]
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::ec2-linux-nvidia-drivers", "/*"] ]
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::ec2-linux-nvidia-drivers"] ]

              - Effect: Allow
                Action:
                  -  ses:SendEmail
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":ses:*:", !Ref  "AWS::AccountId", ":identity*"] ]

              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource:
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:volume/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:network-interface/*"

              - Effect: Allow
                Action:
                  - ec2:DescribeVolumes
                  - ec2:DescribeNetworkInterfaces
                Resource: "*"

              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource: "*"

  ProxyIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ProxyIAMRole

  SchedulerIAMRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "API calls are read commands which have to be mapped to wildcard resources"
          - id: W76
            reason: "Stelligent Policy Complexity Metric (SPCM) already reduced to minimum"

    Type: AWS::IAM::Role
    DependsOn: ComputeNodeIAMRole
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "ssm.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # Support for SSM
      Policies:
        - PolicyName: SchedulerReadPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - pricing:GetProducts
                  - budgets:ViewBudget
                  - ec2:DescribeInstances
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeImages
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstanceTypes
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeReservedInstances
                  - ec2:DescribeSpotInstanceRequests
                  - ec2:DescribeVpcClassicLink
                  - ec2:DescribeVolumes
                  - ec2:DescribePlacementGroups
                  - ec2:DescribeKeyPairs
                  - ec2:DescribeLaunchTemplates
                  - ec2:DescribeLaunchTemplateVersions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSpotFleetRequests
                  - ec2:DescribeSpotFleetInstances
                  - fsx:DescribeFileSystems
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeScalingActivities
                  - autoscaling:DescribeLaunchConfigurations
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:DescribeTargetGroups
                  - savingsplans:DescribeSavingsPlans
                  - servicequotas:ListServiceQuotas
                  - ssm:ListDocuments
                  - ssm:ListDocumentVersions
                  - ssm:DescribeDocument
                  - ssm:GetDocument
                  - ssm:DescribeInstanceInformation
                  - ssm:DescribeDocumentParameters
                  - ssm:DescribeInstanceProperties
                  - ssm:ListCommands
                  - ssm:GetCommandInvocation
                  - ssm:DescribeAutomationExecutions
                Resource: "*"

        - PolicyName: SchedulerWritePermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:UpdateAutoScalingGroup
                  - autoscaling:DeleteAutoScalingGroup
                  - autoscaling:CreateAutoScalingGroup
                  - autoscaling:DetachInstances
                  - ec2:DeleteLaunchTemplate
                  - ec2:CreateLaunchTemplate
                  - fsx:CreateDataRepositoryTask
                Resource: "*"
                Condition:
                  StringLikeIfExists:
                    "autoscaling:LaunchConfigurationName": !Sub "${ClusterId}*"

              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource:
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:volume/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:network-interface/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*"

              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                Resource: "*"
                Condition:
                  "ForAllValues:StringEquals":
                    "cloudformation:TemplateURL": !Sub "https://s3.{AWS::URLSuffix}/${S3InstallBucket}/${S3InstallFolder}/templates/ComputeNode.template"

              - Effect: Allow
                Action:
                  - ec2:RunInstances
                  - ec2:StopInstances
                  - ec2:StartInstances
                  - ec2:TerminateInstances
                  - ec2:CreatePlacementGroup
                  - ec2:DeletePlacementGroup
                  - ec2:ModifyInstanceAttribute
                Resource:
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:subnet/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:key-pair/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*::snapshot/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:launch-template/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:volume/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:security-group/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:placement-group/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:network-interface/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*::image/*"
                Condition:
                  "ForAllValues:ArnEqualsIfExists":
                      "ec2:Vpc": !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VpcId}"

              - Effect: Allow
                Action:
                  - ssm:SendCommand
                Resource:
                  - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}::document/AWS-RunPowerShellScript"
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}::document/AWS-RunShellScript"

              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":ssm:", ":::automation-definition/"] ]

              - Effect: Allow
                Action:
                  - ssm:StopAutomationExecution
                  - ssm:GetAutomationExecution
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":ssm:", ":::automation-execution/"] ]

              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":lambda:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":function:", !Ref ClusterId, "-Metrics"] ]

              - Effect: Allow
                Action:
                  - fsx:CreateFileSystem
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":fsx:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":file-system/*"] ]

              - Effect: Allow
                Action:
                  - fsx:DeleteFileSystem
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":fsx:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":file-system/*"] ]
                Condition:
                  "StringLike":
                    "aws:ResourceTag/soca:ClusterId": !Sub "${ClusterId}*"

              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                  - iam:AttachRolePolicy
                  - iam:PutRolePolicy
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":iam::", !Ref "AWS::AccountId", ":", "role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/*"] ]
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":iam::", !Ref "AWS::AccountId", ":", "role/aws-service-role/autoscaling.amazonaws.com/*"] ]
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":iam::", !Ref "AWS::AccountId", ":", "role/aws-service-role/spotfleet.amazonaws.com/*"] ]
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":iam::", !Ref "AWS::AccountId", ":", "role/aws-service-role/fsx.amazonaws.com/*"] ]

              - Effect: Allow
                Action:
                  -  ses:SendEmail
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":ses:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":identity*"] ]

              - Effect: Allow
                Action:
                  - ec2:CreatePlacementGroup
                  - ec2:DeletePlacementGroup
                  - ec2:RequestSpotFleet
                  - ec2:ModifySpotFleetRequest
                  - ec2:CancelSpotFleetRequests
                Resource: "*"
                Condition:
                  "ForAllValues:ArnEqualsIfExists":
                      "ec2:Vpc": !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VpcId}"

              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::", !Ref S3InstallBucket , "/*" ] ]
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::", !Ref S3InstallBucket] ]

              - Effect: Allow
                Action:
                  - iam:PassRole
                  - iam:CreateServiceLinkedRole
                Resource:
                  - !GetAtt ComputeNodeIAMRole.Arn
                  - !GetAtt SpotFleetIAMRole.Arn
                Condition:
                  "ForAllValues:ArnEqualsIfExists":
                      "ec2:Vpc": !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VpcId}"

  SchedulerIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref SchedulerIAMRole

  LambdaSolutionMetricRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "* is reduced to minimal pattern"

    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SolutionMetric
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ClusterId}*"

              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DeleteLogStream
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ClusterId}*:log-stream:*"

  LambdaACMIAMRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "* is reduced to minimal pattern"
          - id: W28
            reason: "Name is required to easily identify resource deployed by SOCA"

    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole

      Policies:
        - PolicyName: !Sub ${ClusterId}-LambdaACMIamRole-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ClusterId}*"

              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ClusterId}*:log-stream:*"

              - Effect: Allow
                Action:
                  - acm:ImportCertificate
                  - acm:ListCertificates
                  - acm:AddTagsToCertificate
                Resource: "*"

Outputs:
  SchedulerIAMRole:
    Value: !Ref SchedulerIAMRole
  SchedulerIAMRoleArn:
    Value: !GetAtt SchedulerIAMRole.Arn
  SpotFleetIAMRoleArn:
    Value: !GetAtt SpotFleetIAMRole.Arn
  SolutionMetricsRole:
    Value: !Ref LambdaSolutionMetricRole
  SolutionMetricsRoleArn:
    Value: !GetAtt LambdaSolutionMetricRole.Arn
  SchedulerIAMInstanceProfile:
    Value: !Ref SchedulerIAMInstanceProfile
  SchedulerIAMInstanceProfileArn:
    Value: !GetAtt SchedulerIAMInstanceProfile.Arn
  ComputeNodeIAMRole:
    Value: !Ref ComputeNodeIAMRole
  ComputeNodeIAMRoleArn:
    Value: !GetAtt ComputeNodeIAMRole.Arn
  ComputeNodeInstanceProfile:
    Value: !Ref ComputeNodeInstanceProfile
  ComputeNodeInstanceProfileArn:
    Value: !GetAtt ComputeNodeInstanceProfile.Arn
  LoadBalancerSecurityGroup:
    Value: !GetAtt LoadBalancerSecurityGroup.GroupId
  SchedulerSecurityGroup:
    Value: !GetAtt SchedulerSecurityGroup.GroupId
  ComputeNodeSecurityGroup:
    Value: !GetAtt ComputeNodeSecurityGroup.GroupId
  LambdaACMIAMRoleArn:
    Value: !GetAtt LambdaACMIAMRole.Arn
  ProxyPrivateIP:
    Value: !GetAtt ProxyEC2Instance.PrivateIp
  ProxyPrivateDnsName:
    Value: !Sub "proxy.${SocaDomain}"
  NoProxy:
    Value: !Sub "localhost,127.0.0.1,169.254.169.254,169.254.170.2,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,s3.${AWS::Region}.amazonaws.com"
