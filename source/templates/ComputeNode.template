AWSTemplateFormatVersion: 2010-09-09
Description: (SOCA) - Base template to deploy compute nodes.
Parameters:
  Version:
    Type: String

  S3Bucket:
    Type: String

  SolutionMetricLambda:
    Type: String
    Default: false

  PlacementGroup:
    Type: String
    AllowedValues:
      - true
      - false

  SecurityGroupId:
    Type: List<AWS::EC2::SecurityGroup::Id>

  KeepForever:
    Default: false
    Type: String

  StackUUID:
    Default: false
    Type: String

  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName

  ComputeNodeInstanceProfile:
    Type: String

  JobId:
    Type: String

  JobProject:
    Type: String
    Default: False

  ScratchSize:
    Type: Number
    Default: 0

  RootSize:
    Type: Number

  ImageId:
    Type: String

  JobName:
    Type: String

  JobQueue:
    Type: String

  JobOwner:
    Type: String

  ClusterId:
    Type: String

  EFSAppsDns:
    Type: String

  EFSDataDns:
    Type: String

  SubnetId:
    Type: List<AWS::EC2::Subnet::Id>

  InstanceType:
    Type: String

  SchedulerHostname:
    Type: String

  DesiredCapacity:
    Type: Number

  BaseOS:
    Type: String

  Efa:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false

  S3InstallFolder:
    Type: String

  SpotPrice:
    Type: String
    Default: false

  CoreCount:
    Type: Number

  ThreadsPerCore:
    Type: Number
    Default: 1

  VolumeTypeIops:
    Type: Number
    Default: 0

  FSxLustreBucket:
    Type: String
    Default: false

  FSxLustreSize:
    Type: Number
    Default: 1200

  FSxLustreDns:
    Type: String
    Default: false

Mappings:
  Send:
    AnonymousUsage:
      Data: Yes

Conditions:
  UsePlacementGroup: !Equals [ !Ref PlacementGroup, true]
  SendMetrics: !Equals [!FindInMap [ Send, AnonymousUsage, Data  ], Yes]
  UseEFA: !Equals [ !Ref Efa, true]
  UseSpotInstance: !Not [!Equals [ !Ref SpotPrice, false]]
  UseScratchDisk: !Not [!Equals [ !Ref ScratchSize, 0]]
  UseAmazonLinux: !Equals [ !Ref BaseOS, 'amazonlinux2']
  UseProvisionedIo: !Not [!Equals [ !Ref VolumeTypeIops, 0]]
  UseFsxLustre: !Not [!Equals [ !Ref FSxLustreBucket, false]]

Resources:
  ComputeNodePlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Condition: UsePlacementGroup
    Properties:
      Strategy: cluster

  FSxLustreFileSystem:
    Condition: UseFsxLustre
    Type: AWS::FSx::FileSystem
    Properties:
      FileSystemType: LUSTRE
      LustreConfiguration:
        ImportPath: !Ref FSxLustreBucket
        ExportPath: !Sub ${FSxLustreBucket}/${ClusterId}-fsxoutput/job-${JobId}/

      SecurityGroupIds: !Ref SecurityGroupId
      StorageCapacity: !Ref FSxLustreSize
      SubnetIds: !Ref SubnetId
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-compute-job-${JobId}
        - Key: soca:JobId
          Value: !Ref JobId
        - Key: soca:JobName
          Value: !Ref JobName
        - Key: soca:JobQueue
          Value: !Ref JobQueue
        - Key: soca:StackId
          Value: !Sub ${AWS::StackName}
        - Key: soca:JobOwner
          Value: !Ref JobOwner
        - Key: soca:JobProject
          Value: !Ref JobProject
        - Key: soca:KeepForever
          Value: !Ref KeepForever
        - Key: soca:ClusterId
          Value: !Ref ClusterId
        - Key: soca:FSx
          Value: True


  NodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${ClusterId}-${JobId}
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: !If [UseAmazonLinux, "/dev/xvda", "/dev/sda1"]
            Ebs:
                VolumeSize: !Ref RootSize
                VolumeType: gp2
                DeleteOnTermination: true
                Encrypted: True

          - !If
            - UseScratchDisk
            - DeviceName: '/dev/sdj' # /scratch - using an uncommon name just in case customers use AMI with existing EBS disks
              Ebs:
                VolumeSize: !Ref ScratchSize
                VolumeType: !If [UseProvisionedIo, io1, gp2]
                Iops: !If [UseProvisionedIo, !Ref VolumeTypeIops, !Ref "AWS::NoValue"]
                DeleteOnTermination: true
                Encrypted: True
            - !Ref AWS::NoValue


        EbsOptimized: true
        CpuOptions:
          CoreCount: !Ref CoreCount
          ThreadsPerCore: !Ref ThreadsPerCore

        IamInstanceProfile:
          Name: !Ref ComputeNodeInstanceProfile
        KeyName: !Ref SSHKeyPair
        ImageId: !Ref ImageId
        InstanceMarketOptions:
          MarketType: !If [UseSpotInstance, "spot", !Ref "AWS::NoValue"]
          SpotOptions:
            MaxPrice: !If [UseSpotInstance, !Ref SpotPrice, !Ref "AWS::NoValue"]

        InstanceType: !Ref InstanceType
        NetworkInterfaces:
          - InterfaceType: !If [UseEFA, "efa", !Ref "AWS::NoValue"]
            DeleteOnTermination: true
            DeviceIndex: 0
            Groups: !Ref SecurityGroupId

        UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash -xe
            ## Aligo Specific - DO NOT EDIT
            export PATH=$PATH:/usr/local/bin
            if [ "${BaseOS}" == "centos7" ] || [ "${BaseOS}" == "rhel7" ];
              then
                EASY_INSTALL=$(which easy_install-2.7)
                $EASY_INSTALL pip
                PIP=$(which pip2.7)
                $PIP install awscli
            fi

            if [ "${BaseOS}" == "amazonlinux2" ];
            then
              /usr/sbin/update-motd --disable
            fi
            echo export "SOCA_BASE_OS=${BaseOS}" >> /etc/environment
            echo export "SOCA_JOB_QUEUE=${JobQueue}" >> /etc/environment
            echo export "SOCA_JOB_OWNER=${JobOwner}" >> /etc/environment
            echo export "SOCA_JOB_NAME=${JobName}" >> /etc/environment
            echo export "SOCA_JOB_PROJECT=${JobProject}" >> /etc/environment
            echo export "SOCA_VERSION=${Version}" >> /etc/environment
            echo export "SOCA_JOB_EFA=${Efa}" >> /etc/environment
            echo export "SOCA_JOB_ID=${JobId}" >> /etc/environment
            echo export "SOCA_SCRATCH_SIZE=${ScratchSize}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET=${S3Bucket}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET_FOLDER=${S3InstallFolder}" >> /etc/environment
            echo export "SOCA_VERSION=${Version}" >> /etc/environment
            echo export "SOCA_FSX_LUSTRE_BUCKET=${FSxLustreBucket}" >> /etc/environment
            echo export "SOCA_FSX_LUSTRE_DNS=${FSxLustreDns}" >> /etc/environment
            echo export "AWS_STACK_ID=${AWS::StackName}" >> /etc/environment
            echo export "AWS_DEFAULT_REGION=${AWS::Region}" >> /etc/environment


            source /etc/environment
            AWS=$(which aws)

            # Tag EBS disks manually as CFN does not support it
            AWS_AVAIL_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)
            AWS_REGION="`echo \"$AWS_AVAIL_ZONE\" | sed 's/[a-z]$//'`"
            AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            EBS_IDS=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values="$AWS_INSTANCE_ID" --region $AWS_REGION --query 'Volumes[*].[VolumeId]' --out text | tr "\n" " ")
            $AWS ec2 create-tags --resources $EBS_IDS --region $AWS_REGION --tags Key=soca:JobOwner,Value=$SOCA_JOB_OWNER Key=soca:JobProject,Value=$SOCA_JOB_PROJECT Key=Name,Value=soca-job-$SOCA_JOB_ID  Key=soca:JobId,Value=$SOCA_JOB_ID Key=soca:JobQueue,Value=$SOCA_JOB_QUEUE

            # Give some sudo permission to the user on this specific machine
            echo "${JobOwner} ALL=(ALL) /bin/yum" >> /etc/sudoers

            echo "@reboot /bin/aws s3 cp s3://$SOCA_INSTALL_BUCKET/$SOCA_INSTALL_BUCKET_FOLDER/scripts/ComputeNodePostReboot.sh /root && /bin/bash /root/ComputeNodePostReboot.sh >> /root/ComputeNodePostInstall.log 2>&1" | crontab -
            # Feel free to add new scripts based on your own requirement.

            $AWS s3 cp s3://$SOCA_INSTALL_BUCKET/$SOCA_INSTALL_BUCKET_FOLDER/scripts/config.cfg /root/
            $AWS s3 cp s3://$SOCA_INSTALL_BUCKET/$SOCA_INSTALL_BUCKET_FOLDER/scripts/ComputeNode.sh /root/
            /bin/bash /root/ComputeNode.sh ${S3Bucket} ${EFSDataDns} ${EFSAppsDns} ${SchedulerHostname} >> /root/ComputeNode.sh.log 2>&1


  AutoScalingComputeGroup:
    DependsOn: NodeLaunchTemplate
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref NodeLaunchTemplate
        Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber
      MinSize: !Ref DesiredCapacity
      MaxSize: !Ref DesiredCapacity
      VPCZoneIdentifier: !Ref SubnetId
      PlacementGroup: !If [UsePlacementGroup, !Ref ComputeNodePlacementGroup, !Ref "AWS::NoValue"]
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-compute-job-${JobId}
          PropagateAtLaunch: true
        - Key: soca:JobId
          Value: !Ref JobId
          PropagateAtLaunch: true
        - Key: soca:JobName
          Value: !Ref JobName
          PropagateAtLaunch: true
        - Key: soca:JobQueue
          Value: !Ref JobQueue
          PropagateAtLaunch: true
        - Key: soca:StackId
          Value: !Sub ${AWS::StackName}
          PropagateAtLaunch: true
        - Key: soca:JobOwner
          Value: !Ref JobOwner
          PropagateAtLaunch: true
        - Key: soca:JobProject
          Value: !Ref JobProject
          PropagateAtLaunch: true
        - Key: soca:KeepForever
          Value: !Ref KeepForever
          PropagateAtLaunch: true
        - Key: soca:ClusterId
          Value: !Ref ClusterId
          PropagateAtLaunch: true
        - Key: soca:NodeType
          Value: soca-compute-node
          PropagateAtLaunch: true

  SendAnonymousMetrics:
    Condition: SendMetrics
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Ref SolutionMetricLambda
      DesiredCapacity: !Ref DesiredCapacity
      InstanceType: !Ref InstanceType
      Efa: !Ref Efa
      ScratchSize: !Ref ScratchSize
      RootSize: !Ref RootSize
      SpotPrice: !Ref SpotPrice
      BaseOS: !Ref BaseOS
      StackUUID: !Ref StackUUID
      KeepForever: !Ref KeepForever