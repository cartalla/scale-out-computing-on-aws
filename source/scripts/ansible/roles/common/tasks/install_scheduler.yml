# SOCA - Compute Node Bootstrap
# Configure Directory Services

- name: Retrieve current PBSPro version (if any)
  shell: /opt/pbs/bin/qstat --version | awk {'print $NF'}
  args:
    executable: /bin/bash
  register: pbs_version

- name: Checking if  PBSPro Version exist
  debug:
    msg: "{{ pbs_version }}"

- name: Expected PBSPro URL
  debug:
    msg: "{{ PBSPRO_URL }}"

- name: Expected PBSPro Checksum hash (md5)
  debug:
    msg: "{{ PBSPRO_HASH }}"

- name: Download PBSPro installer if not already installed
  get_url:
    url: "{{ PBSPRO_URL }}"
    dest: /root/
    checksum: "md5:{{ PBSPRO_HASH }}"
  when: PBSPRO_VERSION != pbs_version.stdout

- name: Extract PBSPro installer
  unarchive:
    src: "/root/{{ PBSPRO_TGZ }}"
    dest: "/root/"
  when: PBSPRO_VERSION != pbs_version.stdout

- name: Compile and install PBSPro
  shell: |
    ./autogen.sh
    ./configure --prefix=/opt/pbs
    make -j6
    make install -j6
    /opt/pbs/libexec/pbs_postinstall
    chmod 4755 /opt/pbs/sbin/pbs_iff /opt/pbs/sbin/pbs_rcp
  args:
    executable: /bin/bash
    chdir: "/root/pbspro-{{ PBSPRO_VERSION }}"
  when: PBSPRO_VERSION != pbs_version.stdout

- name: Create /etc/pbs.conf (backup existing if needed)
  template:
    src: ../templates/etc/pbs.conf.j2
    dest: /etc/pbs.conf
    mode: 644
    backup: true

- name: Master host - Create /var/spool/pbs/mom_priv/config (backup existing if needed)
  template:
    src: ../../master/templates/var/spool/pbs/mom_priv/config.j2
    dest: /var/spool/pbs/mom_priv/config
    mode: 644
    backup: true
  when: host == 'master'

- name: Compute Node - Create /var/spool/pbs/mom_priv/config (backup existing if needed)
  template:
    src: ../../compute_node/templates/var/spool/pbs/mom_priv/config.j2
    dest: /var/spool/pbs/mom_priv/config
    mode: 644
    backup: true
  when: host == 'compute_node'